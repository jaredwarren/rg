// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// schedule client
//
// Command:
// $ goa gen github.com/jaredwarren/rg/design

package schedule

import (
	"context"

	goa "goa.design/goa"
)

// Client is the "schedule" service client.
type Client struct {
	ListEndpoint   goa.Endpoint
	CreateEndpoint goa.Endpoint
	RemoveEndpoint goa.Endpoint
	UpdateEndpoint goa.Endpoint
	ColorEndpoint  goa.Endpoint
	SoundEndpoint  goa.Endpoint
}

// NewClient initializes a "schedule" service client given the endpoints.
func NewClient(list, create, remove, update, color, sound goa.Endpoint) *Client {
	return &Client{
		ListEndpoint:   list,
		CreateEndpoint: create,
		RemoveEndpoint: remove,
		UpdateEndpoint: update,
		ColorEndpoint:  color,
		SoundEndpoint:  sound,
	}
}

// List calls the "list" endpoint of the "schedule" service.
func (c *Client) List(ctx context.Context) (res []*Schedule, err error) {
	var ires interface{}
	ires, err = c.ListEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.([]*Schedule), nil
}

// Create calls the "create" endpoint of the "schedule" service.
func (c *Client) Create(ctx context.Context, p *SchedulePayload) (res *Schedule, err error) {
	var ires interface{}
	ires, err = c.CreateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Schedule), nil
}

// Remove calls the "remove" endpoint of the "schedule" service.
// Remove may return the following errors:
//	- "not_found" (type *NotFound): Bottle not found
//	- error: internal error
func (c *Client) Remove(ctx context.Context, p *RemovePayload) (err error) {
	_, err = c.RemoveEndpoint(ctx, p)
	return
}

// Update calls the "update" endpoint of the "schedule" service.
func (c *Client) Update(ctx context.Context, p *UpdatePayload) (err error) {
	_, err = c.UpdateEndpoint(ctx, p)
	return
}

// Color calls the "color" endpoint of the "schedule" service.
func (c *Client) Color(ctx context.Context) (res *Color, err error) {
	var ires interface{}
	ires, err = c.ColorEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*Color), nil
}

// Sound calls the "sound" endpoint of the "schedule" service.
func (c *Client) Sound(ctx context.Context, p *SoundPayload) (err error) {
	_, err = c.SoundEndpoint(ctx, p)
	return
}
