// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// rg HTTP client CLI support package
//
// Command:
// $ goa gen github.com/jaredwarren/rg/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	colorc "github.com/jaredwarren/rg/gen/http/color/client"
	schedulec "github.com/jaredwarren/rg/gen/http/schedule/client"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `color (update|color)
schedule (list|create|remove)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` color update --body '{
      "color": "yellow"
   }'` + "\n" +
		os.Args[0] + ` schedule list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		colorFlags = flag.NewFlagSet("color", flag.ContinueOnError)

		colorUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		colorUpdateBodyFlag = colorUpdateFlags.String("body", "REQUIRED", "")

		colorColorFlags = flag.NewFlagSet("color", flag.ExitOnError)

		scheduleFlags = flag.NewFlagSet("schedule", flag.ContinueOnError)

		scheduleListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		scheduleCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		scheduleCreateBodyFlag = scheduleCreateFlags.String("body", "REQUIRED", "")

		scheduleRemoveFlags  = flag.NewFlagSet("remove", flag.ExitOnError)
		scheduleRemoveIDFlag = scheduleRemoveFlags.String("id", "REQUIRED", "")
	)
	colorFlags.Usage = colorUsage
	colorUpdateFlags.Usage = colorUpdateUsage
	colorColorFlags.Usage = colorColorUsage

	scheduleFlags.Usage = scheduleUsage
	scheduleListFlags.Usage = scheduleListUsage
	scheduleCreateFlags.Usage = scheduleCreateUsage
	scheduleRemoveFlags.Usage = scheduleRemoveUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if len(os.Args) < flag.NFlag()+3 {
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = os.Args[1+flag.NFlag()]
		switch svcn {
		case "color":
			svcf = colorFlags
		case "schedule":
			svcf = scheduleFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(os.Args[2+flag.NFlag():]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = os.Args[2+flag.NFlag()+svcf.NFlag()]
		switch svcn {
		case "color":
			switch epn {
			case "update":
				epf = colorUpdateFlags

			case "color":
				epf = colorColorFlags

			}

		case "schedule":
			switch epn {
			case "list":
				epf = scheduleListFlags

			case "create":
				epf = scheduleCreateFlags

			case "remove":
				epf = scheduleRemoveFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if len(os.Args) > 2+flag.NFlag()+svcf.NFlag() {
		if err := epf.Parse(os.Args[3+flag.NFlag()+svcf.NFlag():]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "color":
			c := colorc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "update":
				endpoint = c.Update()
				data, err = colorc.BuildUpdatePayload(*colorUpdateBodyFlag)
			case "color":
				endpoint = c.Color()
				data = nil
			}
		case "schedule":
			c := schedulec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data = nil
			case "create":
				endpoint = c.Create()
				data, err = schedulec.BuildCreatePayload(*scheduleCreateBodyFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = schedulec.BuildRemovePayload(*scheduleRemoveIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// colorUsage displays the usage of the color command and its subcommands.
func colorUsage() {
	fmt.Fprintf(os.Stderr, `Color service
Usage:
    %s [globalflags] color COMMAND [flags]

COMMAND:
    update: Set color
    color: get current color

Additional help:
    %s color COMMAND --help
`, os.Args[0], os.Args[0])
}
func colorUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] color update -body JSON

Set color
    -body JSON: 

Example:
    `+os.Args[0]+` color update --body '{
      "color": "yellow"
   }'
`, os.Args[0])
}

func colorColorUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] color color

get current color

Example:
    `+os.Args[0]+` color color
`, os.Args[0])
}

// scheduleUsage displays the usage of the schedule command and its subcommands.
func scheduleUsage() {
	fmt.Fprintf(os.Stderr, `The Alarm schedule service.
Usage:
    %s [globalflags] schedule COMMAND [flags]

COMMAND:
    list: List all stored bottles
    create: create new cron schedule
    remove: Remove cron schedule

Additional help:
    %s schedule COMMAND --help
`, os.Args[0], os.Args[0])
}
func scheduleListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] schedule list

List all stored bottles

Example:
    `+os.Args[0]+` schedule list
`, os.Args[0])
}

func scheduleCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] schedule create -body JSON

create new cron schedule
    -body JSON: 

Example:
    `+os.Args[0]+` schedule create --body '{
      "color": "green",
      "cron": "30 6 * * 1-5",
      "name": "Week Days at 6:30am",
      "next": ""
   }'
`, os.Args[0])
}

func scheduleRemoveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] schedule remove -id STRING

Remove cron schedule
    -id STRING: 

Example:
    `+os.Args[0]+` schedule remove --id "Exercitationem unde aperiam nihil similique beatae ratione."
`, os.Args[0])
}
