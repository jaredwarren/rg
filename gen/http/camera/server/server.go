// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// camera HTTP server
//
// Command:
// $ goa gen github.com/jaredwarren/rg/design

package server

import (
	"context"
	"net/http"

	camera "github.com/jaredwarren/rg/gen/camera"
	goahttp "goa.design/goa/http"
)

// Server lists the camera service endpoint HTTP handlers.
type Server struct {
	Mounts []*MountPoint
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the camera service endpoints.
func New(
	e *camera.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{},
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "camera" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
}

// Mount configures the mux to serve the camera endpoints.
func Mount(mux goahttp.Muxer) {
}
