// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// color HTTP client types
//
// Command:
// $ goa gen github.com/jaredwarren/rg/design

package client

import (
	color "github.com/jaredwarren/rg/gen/color"
	goa "goa.design/goa"
)

// UpdateRequestBody is the type of the "color" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// color to set
	Color string `form:"color" json:"color" xml:"color"`
}

// ColorResponseBody is the type of the "color" service "color" endpoint HTTP
// response body.
type ColorResponseBody struct {
	// color to set
	Color *string `form:"color,omitempty" json:"color,omitempty" xml:"color,omitempty"`
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "color" service.
func NewUpdateRequestBody(p *color.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Color: p.Color,
	}
	return body
}

// NewColorOK builds a "color" service "color" endpoint result from a HTTP "OK"
// response.
func NewColorOK(body *ColorResponseBody) *color.Color {
	v := &color.Color{
		Color: *body.Color,
	}
	return v
}

// Validate runs the validations defined on ColorResponseBody
func (body *ColorResponseBody) Validate() (err error) {
	if body.Color == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("color", "body"))
	}
	if body.Color != nil {
		if !(*body.Color == "red" || *body.Color == "yellow" || *body.Color == "green" || *body.Color == "off") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.color", *body.Color, []interface{}{"red", "yellow", "green", "off"}))
		}
	}
	return
}
