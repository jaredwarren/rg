// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// color HTTP client CLI support package
//
// Command:
// $ goa gen github.com/jaredwarren/rg/design

package client

import (
	"encoding/json"
	"fmt"

	color "github.com/jaredwarren/rg/gen/color"
	goa "goa.design/goa"
)

// BuildUpdatePayload builds the payload for the color update endpoint from CLI
// flags.
func BuildUpdatePayload(colorUpdateBody string) (*color.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(colorUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"color\": \"yellow\"\n   }'")
		}
		if !(body.Color == "red" || body.Color == "yellow" || body.Color == "green" || body.Color == "off") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.color", body.Color, []interface{}{"red", "yellow", "green", "off"}))
		}
		if err != nil {
			return nil, err
		}
	}
	if err != nil {
		return nil, err
	}
	v := &color.UpdatePayload{
		Color: body.Color,
	}
	return v, nil
}
