// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// schedule HTTP client CLI support package
//
// Command:
// $ goa gen github.com/jaredwarren/rg/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	schedule "github.com/jaredwarren/rg/gen/schedule"
	goa "goa.design/goa"
)

// BuildCreatePayload builds the payload for the schedule create endpoint from
// CLI flags.
func BuildCreatePayload(scheduleCreateBody string) (*schedule.SchedulePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(scheduleCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"color\": \"off\",\n      \"cron\": \"30 6 * * 1-5\",\n      \"name\": \"Week Days at 6:30am\",\n      \"next\": \"\",\n      \"sound\": false\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
		}
		if !(body.Color == "red" || body.Color == "yellow" || body.Color == "green" || body.Color == "off") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.color", body.Color, []interface{}{"red", "yellow", "green", "off"}))
		}
		if err != nil {
			return nil, err
		}
	}
	if err != nil {
		return nil, err
	}
	v := &schedule.SchedulePayload{
		Name:  body.Name,
		Cron:  body.Cron,
		Color: body.Color,
		Next:  body.Next,
		Sound: body.Sound,
	}
	return v, nil
}

// BuildRemovePayload builds the payload for the schedule remove endpoint from
// CLI flags.
func BuildRemovePayload(scheduleRemoveID string) (*schedule.RemovePayload, error) {
	var id string
	{
		id = scheduleRemoveID
	}
	payload := &schedule.RemovePayload{
		ID: id,
	}
	return payload, nil
}

// BuildUpdatePayload builds the payload for the schedule update endpoint from
// CLI flags.
func BuildUpdatePayload(scheduleUpdateBody string) (*schedule.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(scheduleUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"color\": \"off\"\n   }'")
		}
		if !(body.Color == "red" || body.Color == "yellow" || body.Color == "green" || body.Color == "off") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.color", body.Color, []interface{}{"red", "yellow", "green", "off"}))
		}
		if err != nil {
			return nil, err
		}
	}
	if err != nil {
		return nil, err
	}
	v := &schedule.UpdatePayload{
		Color: body.Color,
	}
	return v, nil
}

// BuildSoundPayload builds the payload for the schedule sound endpoint from
// CLI flags.
func BuildSoundPayload(scheduleSoundBody string) (*schedule.SoundPayload, error) {
	var err error
	var body SoundRequestBody
	{
		err = json.Unmarshal([]byte(scheduleSoundBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"sound\": false\n   }'")
		}
	}
	if err != nil {
		return nil, err
	}
	v := &schedule.SoundPayload{
		Sound: body.Sound,
	}
	return v, nil
}
