// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// schedule HTTP client types
//
// Command:
// $ goa gen github.com/jaredwarren/rg/design

package client

import (
	"unicode/utf8"

	schedule "github.com/jaredwarren/rg/gen/schedule"
	scheduleviews "github.com/jaredwarren/rg/gen/schedule/views"
	goa "goa.design/goa"
)

// ScheduleRequestBody is the type of the "schedule" service "schedule"
// endpoint HTTP request body.
type ScheduleRequestBody struct {
	// ID is the unique id of the schedule.
	ID string `form:"id" json:"id" xml:"id"`
	// Descriptive Name
	Name string `form:"name" json:"name" xml:"name"`
	// Valid cron string
	Cron string `form:"cron" json:"cron" xml:"cron"`
	// color to set
	Color string `form:"color" json:"color" xml:"color"`
}

// ListResponseBody is the type of the "schedule" service "list" endpoint HTTP
// response body.
type ListResponseBody []*SchedulePayloadResponseBody

// ScheduleResponseBody is the type of the "schedule" service "schedule"
// endpoint HTTP response body.
type ScheduleResponseBody struct {
	// Descriptive Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Valid cron string
	Cron *string `form:"cron,omitempty" json:"cron,omitempty" xml:"cron,omitempty"`
	// color to set
	Color *string `form:"color,omitempty" json:"color,omitempty" xml:"color,omitempty"`
}

// SchedulePayloadResponseBody is used to define fields on response body types.
type SchedulePayloadResponseBody struct {
	// ID is the unique id of the schedule.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Descriptive Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Valid cron string
	Cron *string `form:"cron,omitempty" json:"cron,omitempty" xml:"cron,omitempty"`
	// color to set
	Color *string `form:"color,omitempty" json:"color,omitempty" xml:"color,omitempty"`
}

// NewScheduleRequestBody builds the HTTP request body from the payload of the
// "schedule" endpoint of the "schedule" service.
func NewScheduleRequestBody(p *schedule.SchedulePayload) *ScheduleRequestBody {
	body := &ScheduleRequestBody{
		ID:    p.ID,
		Name:  p.Name,
		Cron:  p.Cron,
		Color: p.Color,
	}
	return body
}

// NewListSchedulePayloadCollectionOK builds a "schedule" service "list"
// endpoint result from a HTTP "OK" response.
func NewListSchedulePayloadCollectionOK(body ListResponseBody) scheduleviews.SchedulePayloadCollectionView {
	v := make([]*scheduleviews.SchedulePayloadView, len(body))
	for i, val := range body {
		v[i] = &scheduleviews.SchedulePayloadView{
			ID:    val.ID,
			Name:  val.Name,
			Cron:  val.Cron,
			Color: val.Color,
		}
	}
	return v
}

// NewScheduleCreated builds a "schedule" service "schedule" endpoint result
// from a HTTP "Created" response.
func NewScheduleCreated(body *ScheduleResponseBody) *schedule.Schedule {
	v := &schedule.Schedule{
		Name:  body.Name,
		Cron:  *body.Cron,
		Color: *body.Color,
	}
	return v
}

// Validate runs the validations defined on ScheduleResponseBody
func (body *ScheduleResponseBody) Validate() (err error) {
	if body.Color == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("color", "body"))
	}
	if body.Cron == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cron", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Color != nil {
		if !(*body.Color == "red" || *body.Color == "yellow" || *body.Color == "green" || *body.Color == "off") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.color", *body.Color, []interface{}{"red", "yellow", "green", "off"}))
		}
	}
	return
}

// Validate runs the validations defined on SchedulePayloadResponseBody
func (body *SchedulePayloadResponseBody) Validate() (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Cron == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cron", "body"))
	}
	if body.Color == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("color", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Color != nil {
		if !(*body.Color == "red" || *body.Color == "yellow" || *body.Color == "green" || *body.Color == "off") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.color", *body.Color, []interface{}{"red", "yellow", "green", "off"}))
		}
	}
	return
}
