// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// schedule HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/jaredwarren/rg/design

package server

import (
	"context"
	"io"
	"net/http"

	schedule "github.com/jaredwarren/rg/gen/schedule"
	scheduleviews "github.com/jaredwarren/rg/gen/schedule/views"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// EncodeHomeResponse returns an encoder for responses returned by the schedule
// home endpoint.
func EncodeHomeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// EncodeListResponse returns an encoder for responses returned by the schedule
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(scheduleviews.SchedulePayloadCollection)
		enc := encoder(ctx, w)
		body := NewSchedulePayloadResponseBodyCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeScheduleResponse returns an encoder for responses returned by the
// schedule schedule endpoint.
func EncodeScheduleResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*schedule.Schedule)
		enc := encoder(ctx, w)
		body := NewScheduleResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeScheduleRequest returns a decoder for requests sent to the schedule
// schedule endpoint.
func DecodeScheduleRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ScheduleRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = body.Validate()
		if err != nil {
			return nil, err
		}
		payload := NewSchedulePayload(&body)

		return payload, nil
	}
}

// EncodeRemoveResponse returns an encoder for responses returned by the
// schedule remove endpoint.
func EncodeRemoveResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeRemoveRequest returns a decoder for requests sent to the schedule
// remove endpoint.
func DecodeRemoveRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewRemovePayload(id)

		return payload, nil
	}
}
