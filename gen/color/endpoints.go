// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// color endpoints
//
// Command:
// $ goa gen github.com/jaredwarren/rg/design

package color

import (
	"context"

	goa "goa.design/goa"
)

// Endpoints wraps the "color" service endpoints.
type Endpoints struct {
	Update goa.Endpoint
	Color  goa.Endpoint
}

// NewEndpoints wraps the methods of the "color" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Update: NewUpdateEndpoint(s),
		Color:  NewColorEndpoint(s),
	}
}

// Use applies the given middleware to all the "color" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Update = m(e.Update)
	e.Color = m(e.Color)
}

// NewUpdateEndpoint returns an endpoint function that calls the method
// "update" of service "color".
func NewUpdateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdatePayload)
		return nil, s.Update(ctx, p)
	}
}

// NewColorEndpoint returns an endpoint function that calls the method "color"
// of service "color".
func NewColorEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Color(ctx)
	}
}
